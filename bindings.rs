/* automatically generated by rust-bindgen */

pub type FILE = libc::FILE;

pub const FF_DEFINED: u32 = 86604;
pub const FFCONF_DEF: u32 = 86604;
pub const FF_FS_READONLY: u32 = 0;
pub const FF_FS_MINIMIZE: u32 = 0;
pub const FF_USE_STRFUNC: u32 = 0;
pub const FF_USE_FIND: u32 = 0;
pub const FF_USE_MKFS: u32 = 0;
pub const FF_USE_FASTSEEK: u32 = 0;
pub const FF_USE_EXPAND: u32 = 0;
pub const FF_USE_CHMOD: u32 = 0;
pub const FF_USE_LABEL: u32 = 0;
pub const FF_USE_FORWARD: u32 = 0;
pub const FF_CODE_PAGE: u32 = 932;
pub const FF_USE_LFN: u32 = 0;
pub const FF_MAX_LFN: u32 = 255;
pub const FF_LFN_UNICODE: u32 = 0;
pub const FF_LFN_BUF: u32 = 255;
pub const FF_SFN_BUF: u32 = 12;
pub const FF_STRF_ENCODE: u32 = 3;
pub const FF_FS_RPATH: u32 = 0;
pub const FF_VOLUMES: u32 = 1;
pub const FF_STR_VOLUME_ID: u32 = 0;
pub const FF_MULTI_PARTITION: u32 = 0;
pub const FF_MIN_SS: u32 = 512;
pub const FF_MAX_SS: u32 = 512;
pub const FF_USE_TRIM: u32 = 0;
pub const FF_FS_NOFSINFO: u32 = 0;
pub const FF_FS_TINY: u32 = 0;
pub const FF_FS_EXFAT: u32 = 0;
pub const FF_FS_NORTC: u32 = 0;
pub const FF_NORTC_MON: u32 = 1;
pub const FF_NORTC_MDAY: u32 = 1;
pub const FF_NORTC_YEAR: u32 = 2018;
pub const FF_FS_LOCK: u32 = 0;
pub const FF_FS_REENTRANT: u32 = 0;
pub const FF_FS_TIMEOUT: u32 = 1000;
pub const FF_INTDEF: u32 = 2;
pub const _NEWLIB_VERSION_H__: u32 = 1;
pub const _NEWLIB_VERSION: &'static [u8; 6usize] = b"3.0.0\0";
pub const __NEWLIB__: u32 = 3;
pub const __NEWLIB_MINOR__: u32 = 0;
pub const __NEWLIB_PATCHLEVEL__: u32 = 0;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __ATFILE_VISIBLE: u32 = 1;
pub const __BSD_VISIBLE: u32 = 1;
pub const __GNU_VISIBLE: u32 = 0;
pub const __ISO_C_VISIBLE: u32 = 2011;
pub const __LARGEFILE_VISIBLE: u32 = 0;
pub const __MISC_VISIBLE: u32 = 1;
pub const __POSIX_VISIBLE: u32 = 200809;
pub const __SVID_VISIBLE: u32 = 1;
pub const __XSI_VISIBLE: u32 = 0;
pub const __SSP_FORTIFY_LEVEL: u32 = 0;
pub const _POSIX_MONOTONIC_CLOCK: u32 = 200112;
pub const _POSIX_TIMERS: u32 = 1;
pub const __have_longlong64: u32 = 1;
pub const __have_long64: u32 = 1;
pub const ___int8_t_defined: u32 = 1;
pub const ___int16_t_defined: u32 = 1;
pub const ___int32_t_defined: u32 = 1;
pub const ___int64_t_defined: u32 = 1;
pub const ___int_least8_t_defined: u32 = 1;
pub const ___int_least16_t_defined: u32 = 1;
pub const ___int_least32_t_defined: u32 = 1;
pub const ___int_least64_t_defined: u32 = 1;
pub const __int20: u32 = 2;
pub const __INT8: &'static [u8; 3usize] = b"hh\0";
pub const __INT16: &'static [u8; 2usize] = b"h\0";
pub const __INT64: &'static [u8; 2usize] = b"l\0";
pub const __FAST8: &'static [u8; 3usize] = b"hh\0";
pub const __FAST16: &'static [u8; 2usize] = b"h\0";
pub const __FAST64: &'static [u8; 2usize] = b"l\0";
pub const __LEAST8: &'static [u8; 3usize] = b"hh\0";
pub const __LEAST16: &'static [u8; 2usize] = b"h\0";
pub const __LEAST64: &'static [u8; 2usize] = b"l\0";
pub const __int8_t_defined: u32 = 1;
pub const __int16_t_defined: u32 = 1;
pub const __int32_t_defined: u32 = 1;
pub const __int64_t_defined: u32 = 1;
pub const __int_least8_t_defined: u32 = 1;
pub const __int_least16_t_defined: u32 = 1;
pub const __int_least32_t_defined: u32 = 1;
pub const __int_least64_t_defined: u32 = 1;
pub const __int_fast8_t_defined: u32 = 1;
pub const __int_fast16_t_defined: u32 = 1;
pub const __int_fast32_t_defined: u32 = 1;
pub const __int_fast64_t_defined: u32 = 1;
pub const WINT_MIN: u32 = 0;
pub const EOF: i32 = -1;
pub const FA_READ: u32 = 1;
pub const FA_WRITE: u32 = 2;
pub const FA_OPEN_EXISTING: u32 = 0;
pub const FA_CREATE_NEW: u32 = 4;
pub const FA_CREATE_ALWAYS: u32 = 8;
pub const FA_OPEN_ALWAYS: u32 = 16;
pub const FA_OPEN_APPEND: u32 = 48;
pub const FM_FAT: u32 = 1;
pub const FM_FAT32: u32 = 2;
pub const FM_EXFAT: u32 = 4;
pub const FM_ANY: u32 = 7;
pub const FM_SFD: u32 = 8;
pub const FS_FAT12: u32 = 1;
pub const FS_FAT16: u32 = 2;
pub const FS_FAT32: u32 = 3;
pub const FS_EXFAT: u32 = 4;
pub const AM_RDO: u32 = 1;
pub const AM_HID: u32 = 2;
pub const AM_SYS: u32 = 4;
pub const AM_DIR: u32 = 16;
pub const AM_ARC: u32 = 32;
pub type __int8_t = u8;
pub type __uint8_t = u8;
pub type __int16_t = u16;
pub type __uint16_t = u16;
pub type __int32_t = u32;
pub type __uint32_t = u32;
pub type __int64_t = u64;
pub type __uint64_t = u64;
pub type __int_least8_t = u8;
pub type __uint_least8_t = u8;
pub type __int_least16_t = u16;
pub type __uint_least16_t = u16;
pub type __int_least32_t = u32;
pub type __uint_least32_t = u32;
pub type __int_least64_t = u64;
pub type __uint_least64_t = u64;
pub type __intmax_t = u64;
pub type __uintmax_t = u64;
pub type __intptr_t = u64;
pub type __uintptr_t = u64;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type int_least8_t = __int_least8_t;
pub type uint_least8_t = __uint_least8_t;
pub type int_least16_t = __int_least16_t;
pub type uint_least16_t = __uint_least16_t;
pub type int_least32_t = __int_least32_t;
pub type uint_least32_t = __uint_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type int_fast16_t = ::std::os::raw::c_short;
pub type uint_fast16_t = ::std::os::raw::c_ushort;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type UINT = ::std::os::raw::c_uint;
pub type BYTE = ::std::os::raw::c_uchar;
pub type WORD = u16;
pub type WCHAR = u16;
pub type DWORD = u32;
pub type QWORD = u64;
pub type TCHAR = ::std::os::raw::c_char;
pub type FSIZE_t = DWORD;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct FATFS {
    pub fs_type: BYTE,
    pub pdrv: BYTE,
    pub n_fats: BYTE,
    pub wflag: BYTE,
    pub fsi_flag: BYTE,
    pub id: WORD,
    pub n_rootdir: WORD,
    pub csize: WORD,
    pub last_clst: DWORD,
    pub free_clst: DWORD,
    pub n_fatent: DWORD,
    pub fsize: DWORD,
    pub volbase: DWORD,
    pub fatbase: DWORD,
    pub dirbase: DWORD,
    pub database: DWORD,
    pub winsect: DWORD,
    pub win: [BYTE; 512usize],
}
impl Default for FATFS {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FFOBJID {
    pub fs: *mut FATFS,
    pub id: WORD,
    pub attr: BYTE,
    pub stat: BYTE,
    pub sclust: DWORD,
    pub objsize: FSIZE_t,
}
impl Default for FFOBJID {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct FIL {
    pub obj: FFOBJID,
    pub flag: BYTE,
    pub err: BYTE,
    pub fptr: FSIZE_t,
    pub clust: DWORD,
    pub sect: DWORD,
    pub dir_sect: DWORD,
    pub dir_ptr: *mut BYTE,
    pub buf: [BYTE; 512usize],
}
impl Default for FIL {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DIR {
    pub obj: FFOBJID,
    pub dptr: DWORD,
    pub clust: DWORD,
    pub sect: DWORD,
    pub dir: *mut BYTE,
    pub fn_: [BYTE; 12usize],
}
impl Default for DIR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct FILINFO {
    pub fsize: FSIZE_t,
    pub fdate: WORD,
    pub ftime: WORD,
    pub fattrib: BYTE,
    pub fname: [TCHAR; 13usize],
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FRESULT {
    FR_OK = 0,
    FR_DISK_ERR = 1,
    FR_INT_ERR = 2,
    FR_NOT_READY = 3,
    FR_NO_FILE = 4,
    FR_NO_PATH = 5,
    FR_INVALID_NAME = 6,
    FR_DENIED = 7,
    FR_EXIST = 8,
    FR_INVALID_OBJECT = 9,
    FR_WRITE_PROTECTED = 10,
    FR_INVALID_DRIVE = 11,
    FR_NOT_ENABLED = 12,
    FR_NO_FILESYSTEM = 13,
    FR_MKFS_ABORTED = 14,
    FR_TIMEOUT = 15,
    FR_LOCKED = 16,
    FR_NOT_ENOUGH_CORE = 17,
    FR_TOO_MANY_OPEN_FILES = 18,
    FR_INVALID_PARAMETER = 19,
}
extern "C" {
    pub fn f_open(fp: *mut FIL, path: *const TCHAR, mode: BYTE) -> FRESULT;
}
extern "C" {
    pub fn f_close(fp: *mut FIL) -> FRESULT;
}
extern "C" {
    pub fn f_read(
        fp: *mut FIL,
        buff: *mut ::std::os::raw::c_void,
        btr: UINT,
        br: *mut UINT,
    ) -> FRESULT;
}
extern "C" {
    pub fn f_write(
        fp: *mut FIL,
        buff: *const ::std::os::raw::c_void,
        btw: UINT,
        bw: *mut UINT,
    ) -> FRESULT;
}
extern "C" {
    pub fn f_lseek(fp: *mut FIL, ofs: FSIZE_t) -> FRESULT;
}
extern "C" {
    pub fn f_truncate(fp: *mut FIL) -> FRESULT;
}
extern "C" {
    pub fn f_sync(fp: *mut FIL) -> FRESULT;
}
extern "C" {
    pub fn f_opendir(dp: *mut DIR, path: *const TCHAR) -> FRESULT;
}
extern "C" {
    pub fn f_closedir(dp: *mut DIR) -> FRESULT;
}
extern "C" {
    pub fn f_readdir(dp: *mut DIR, fno: *mut FILINFO) -> FRESULT;
}
extern "C" {
    pub fn f_findfirst(
        dp: *mut DIR,
        fno: *mut FILINFO,
        path: *const TCHAR,
        pattern: *const TCHAR,
    ) -> FRESULT;
}
extern "C" {
    pub fn f_findnext(dp: *mut DIR, fno: *mut FILINFO) -> FRESULT;
}
extern "C" {
    pub fn f_mkdir(path: *const TCHAR) -> FRESULT;
}
extern "C" {
    pub fn f_unlink(path: *const TCHAR) -> FRESULT;
}
extern "C" {
    pub fn f_rename(path_old: *const TCHAR, path_new: *const TCHAR) -> FRESULT;
}
extern "C" {
    pub fn f_stat(path: *const TCHAR, fno: *mut FILINFO) -> FRESULT;
}
extern "C" {
    pub fn f_chmod(path: *const TCHAR, attr: BYTE, mask: BYTE) -> FRESULT;
}
extern "C" {
    pub fn f_utime(path: *const TCHAR, fno: *const FILINFO) -> FRESULT;
}
extern "C" {
    pub fn f_chdir(path: *const TCHAR) -> FRESULT;
}
extern "C" {
    pub fn f_chdrive(path: *const TCHAR) -> FRESULT;
}
extern "C" {
    pub fn f_getcwd(buff: *mut TCHAR, len: UINT) -> FRESULT;
}
extern "C" {
    pub fn f_getfree(path: *const TCHAR, nclst: *mut DWORD, fatfs: *mut *mut FATFS) -> FRESULT;
}
extern "C" {
    pub fn f_getlabel(path: *const TCHAR, label: *mut TCHAR, vsn: *mut DWORD) -> FRESULT;
}
extern "C" {
    pub fn f_setlabel(label: *const TCHAR) -> FRESULT;
}
extern "C" {
    pub fn f_forward(
        fp: *mut FIL,
        func: ::std::option::Option<unsafe extern "C" fn(fp: *const BYTE, func: UINT) -> UINT>,
        btf: UINT,
        bf: *mut UINT,
    ) -> FRESULT;
}
extern "C" {
    pub fn f_expand(fp: *mut FIL, szf: FSIZE_t, opt: BYTE) -> FRESULT;
}
extern "C" {
    pub fn f_mount(fs: *mut FATFS, path: *const TCHAR, opt: BYTE) -> FRESULT;
}
extern "C" {
    pub fn f_mkfs(
        path: *const TCHAR,
        opt: BYTE,
        au: DWORD,
        work: *mut ::std::os::raw::c_void,
        len: UINT,
    ) -> FRESULT;
}
extern "C" {
    pub fn f_fdisk(pdrv: BYTE, szt: *const DWORD, work: *mut ::std::os::raw::c_void) -> FRESULT;
}
extern "C" {
    pub fn f_setcp(cp: WORD) -> FRESULT;
}
extern "C" {
    pub fn f_putc(c: TCHAR, fp: *mut FIL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn f_puts(str: *const TCHAR, cp: *mut FIL) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn f_printf(fp: *mut FIL, str: *const TCHAR, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn f_gets(buff: *mut TCHAR, len: ::std::os::raw::c_int, fp: *mut FIL) -> *mut TCHAR;
}
extern "C" {
    pub fn get_fattime() -> DWORD;
}
